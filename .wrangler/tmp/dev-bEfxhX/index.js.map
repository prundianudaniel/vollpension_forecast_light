{
  "version": 3,
  "sources": ["../bundle-lUtrlO/checked-fetch.js", "../bundle-lUtrlO/strip-cf-connecting-ip-header.js", "../../../src/csvProcessor.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-lUtrlO/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-lUtrlO/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/danielprundianu/Documents/projects/vollpension_forecast_light/.wrangler/tmp/dev-bEfxhX",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/**\n * CSV Processing functionality for Vollpension Forecast\n * Handles CSV file parsing and processing with liquidity forecasting\n */\n\n// Helper function to get ISO week number\nfunction getISOWeek(date) {\n  const target = new Date(date.valueOf());\n  const dayNr = (date.getDay() + 6) % 7;\n  target.setDate(target.getDate() - dayNr + 3);\n  const firstThursday = target.valueOf();\n  target.setMonth(0, 1);\n  if (target.getDay() !== 4) {\n    target.setMonth(0, 1 + ((4 - target.getDay() + 7) % 7));\n  }\n  return 1 + Math.ceil((firstThursday - target) / 604800000);\n}\n\n// Helper function to get week number in YYYY-WW format\nfunction getWeekNumber(date) {\n  const year = date.getFullYear();\n  const week = getISOWeek(date);\n  return `${year}-W${week.toString().padStart(2, \"0\")}`;\n}\n\n// Helper function to add weeks to a date\nfunction addWeeks(date, weeks) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + weeks * 7);\n  return result;\n}\n\nfunction calculateWeeklyLiquidityForecast(wonDeals) {\n  const weeklyCashFlow = {};\n\n  wonDeals.forEach((deal) => {\n    const dealValue = parseFloat(deal[\"Deal - Wert\"] || 0);\n    const dealDateStr = deal[\"Deal - Datum des gewonnenen Deals\"];\n    const eventDateStr = deal[\"Deal - Event Datum\"];\n\n    if (!dealDateStr || !eventDateStr || dealValue <= 0) {\n      return; // Skip deals without proper data\n    }\n\n    try {\n      const dealDate = new Date(dealDateStr);\n      const eventDate = new Date(eventDateStr);\n\n      // Check if dates are valid\n      if (isNaN(dealDate.getTime()) || isNaN(eventDate.getTime())) {\n        console.warn(\"Invalid date found:\", dealDateStr, eventDateStr);\n        return; // Skip this deal\n      }\n\n      // 50% of deal value paid 3 weeks after deal won\n      const payment1Date = addWeeks(dealDate, 3);\n      const week1 = getWeekNumber(payment1Date);\n\n      // 50% of deal value paid 3 weeks after event\n      const payment2Date = addWeeks(eventDate, 3);\n      const week2 = getWeekNumber(payment2Date);\n\n      // Add to weekly cash flow\n      weeklyCashFlow[week1] = (weeklyCashFlow[week1] || 0) + dealValue * 0.5;\n      weeklyCashFlow[week2] = (weeklyCashFlow[week2] || 0) + dealValue * 0.5;\n    } catch (error) {\n      console.error(\"Error processing deal dates:\", error);\n    }\n  });\n\n  // Get current week for filtering\n  const currentWeek = getWeekNumber(new Date());\n\n  // Convert to array, filter future weeks, and sort by week (newest first)\n  const forecastArray = Object.entries(weeklyCashFlow)\n    .filter(([week]) => week >= currentWeek) // Only show current and future weeks\n    .map(([week, amount]) => ({\n      week,\n      amount: Math.round(amount * 100) / 100, // Round to 2 decimal places\n      formattedAmount: new Intl.NumberFormat(\"de-DE\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(amount),\n    }))\n    .sort((a, b) => b.week.localeCompare(a.week)); // Sort newest first\n\n  // Calculate cumulative balance (\u00DCbertrag) - sort chronologically first\n  let cumulativeBalance = 0;\n  const sortedForCumulative = [...forecastArray].sort((a, b) =>\n    a.week.localeCompare(b.week)\n  );\n  const forecastWithBalance = sortedForCumulative.map((item) => {\n    cumulativeBalance += item.amount;\n    return {\n      ...item,\n      cumulativeBalance: Math.round(cumulativeBalance * 100) / 100,\n      formattedCumulativeBalance: new Intl.NumberFormat(\"de-DE\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(cumulativeBalance),\n    };\n  });\n\n  return {\n    weeklyForecast: forecastWithBalance,\n    summary: {\n      totalWeeks: forecastArray.length,\n      formattedFinalBalance: new Intl.NumberFormat(\"de-DE\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(cumulativeBalance),\n    },\n  };\n}\n\nfunction calculateLiquidityForecast(wonDeals) {\n  const monthlyCashFlow = {};\n\n  wonDeals.forEach((deal) => {\n    const dealValue = parseFloat(deal[\"Deal - Wert\"] || 0);\n    const dealDateStr = deal[\"Deal - Datum des gewonnenen Deals\"];\n    const eventDateStr = deal[\"Deal - Event Datum\"];\n\n    if (!dealDateStr || !eventDateStr || dealValue <= 0) {\n      return; // Skip deals without proper data\n    }\n\n    try {\n      const dealDate = new Date(dealDateStr);\n      const eventDate = new Date(eventDateStr);\n\n      // Check if dates are valid\n      if (isNaN(dealDate.getTime()) || isNaN(eventDate.getTime())) {\n        console.warn(\"Invalid date found:\", { dealDateStr, eventDateStr });\n        return; // Skip this deal\n      }\n\n      // 50% payment within 3 weeks of deal date\n      const payment1Date = new Date(dealDate);\n      payment1Date.setDate(payment1Date.getDate() + 21); // 3 weeks\n      const payment1Month = payment1Date.toISOString().substring(0, 7); // YYYY-MM\n\n      // 50% payment 3 weeks after event date\n      const payment2Date = new Date(eventDate);\n      payment2Date.setDate(payment2Date.getDate() + 21); // 3 weeks\n      const payment2Month = payment2Date.toISOString().substring(0, 7); // YYYY-MM\n\n      // Add to monthly cash flow\n      if (!monthlyCashFlow[payment1Month]) {\n        monthlyCashFlow[payment1Month] = 0;\n      }\n      if (!monthlyCashFlow[payment2Month]) {\n        monthlyCashFlow[payment2Month] = 0;\n      }\n\n      monthlyCashFlow[payment1Month] += dealValue * 0.5;\n      monthlyCashFlow[payment2Month] += dealValue * 0.5;\n    } catch (error) {\n      console.error(\"Error processing deal dates:\", error);\n    }\n  });\n\n  // Convert to array and sort by month (newest first)\n  const forecastArray = Object.entries(monthlyCashFlow)\n    .map(([month, amount]) => ({\n      month,\n      amount: Math.round(amount * 100) / 100, // Round to 2 decimal places\n      formattedAmount: new Intl.NumberFormat(\"de-DE\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(amount),\n    }))\n    .sort((a, b) => b.month.localeCompare(a.month));\n\n  // Calculate cumulative balance (\u00DCbertrag) - sort chronologically first\n  let cumulativeBalance = 0;\n  const sortedForCumulative = [...forecastArray].sort((a, b) =>\n    a.month.localeCompare(b.month)\n  );\n  const forecastWithBalance = sortedForCumulative.map((item) => {\n    cumulativeBalance += item.amount;\n    return {\n      ...item,\n      cumulativeBalance: Math.round(cumulativeBalance * 100) / 100,\n      formattedCumulativeBalance: new Intl.NumberFormat(\"de-DE\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(cumulativeBalance),\n    };\n  });\n\n  return {\n    monthlyForecast: forecastWithBalance,\n    totalForecastAmount: forecastArray.reduce(\n      (sum, item) => sum + item.amount,\n      0\n    ),\n    summary: {\n      totalMonths: forecastArray.length,\n      averageMonthlyAmount:\n        forecastArray.length > 0\n          ? Math.round(\n              (forecastArray.reduce((sum, item) => sum + item.amount, 0) /\n                forecastArray.length) *\n                100\n            ) / 100\n          : 0,\n      finalBalance: cumulativeBalance,\n      formattedFinalBalance: new Intl.NumberFormat(\"de-DE\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(cumulativeBalance),\n    },\n  };\n}\n\nfunction calculateWeeklyDealStats(allDeals) {\n  const weeklyStats = {};\n\n  allDeals.forEach((deal) => {\n    const dealValue = parseFloat(deal[\"Deal - Wert\"] || 0);\n    const status = deal[\"Deal - Status\"];\n\n    // For won deals, use \"Deal - Datum des gewonnenen Deals\"\n    // For lost deals, use \"Deal - Datum des verlorenen Deals\"\n    let dealDateStr;\n    if (status === \"Gewonnen\") {\n      dealDateStr = deal[\"Deal - Datum des gewonnenen Deals\"];\n    } else if (status === \"Verloren\") {\n      dealDateStr = deal[\"Deal - Datum des verlorenen Deals\"];\n    }\n\n    if (!dealDateStr || dealValue <= 0) {\n      return; // Skip deals without proper data\n    }\n\n    try {\n      const dealDate = new Date(dealDateStr);\n\n      // Check if date is valid\n      if (isNaN(dealDate.getTime())) {\n        console.warn(\"Invalid date found:\", dealDateStr);\n        return; // Skip this deal\n      }\n\n      const week = getWeekNumber(dealDate);\n\n      if (!weeklyStats[week]) {\n        weeklyStats[week] = {\n          week,\n          totalDeals: 0,\n          wonDeals: 0,\n          lostDeals: 0,\n          totalValue: 0,\n          wonValue: 0,\n          lostValue: 0,\n          winRate: 0,\n        };\n      }\n\n      weeklyStats[week].totalDeals++;\n      weeklyStats[week].totalValue += dealValue;\n\n      if (status === \"Gewonnen\") {\n        weeklyStats[week].wonDeals++;\n        weeklyStats[week].wonValue += dealValue;\n      } else if (status === \"Verloren\") {\n        weeklyStats[week].lostDeals++;\n        weeklyStats[week].lostValue += dealValue;\n      }\n\n      // Calculate win rate\n      weeklyStats[week].winRate =\n        weeklyStats[week].totalDeals > 0\n          ? Math.round(\n              (weeklyStats[week].wonDeals / weeklyStats[week].totalDeals) * 100\n            )\n          : 0;\n    } catch (error) {\n      console.error(\"Error processing deal date:\", error);\n    }\n  });\n\n  // Convert to array and sort by week (newest first)\n  return Object.values(weeklyStats).sort((a, b) =>\n    b.week.localeCompare(a.week)\n  );\n}\n\nfunction calculateMonthlyDealStats(allDeals) {\n  const monthlyStats = {};\n\n  allDeals.forEach((deal) => {\n    const dealValue = parseFloat(deal[\"Deal - Wert\"] || 0);\n    const status = deal[\"Deal - Status\"];\n\n    // For won deals, use \"Deal - Datum des gewonnenen Deals\"\n    // For lost deals, use \"Deal - Datum des verlorenen Deals\"\n    let dealDateStr;\n    if (status === \"Gewonnen\") {\n      dealDateStr = deal[\"Deal - Datum des gewonnenen Deals\"];\n    } else if (status === \"Verloren\") {\n      dealDateStr = deal[\"Deal - Datum des verlorenen Deals\"];\n    }\n\n    if (!dealDateStr || dealValue <= 0) {\n      return; // Skip deals without proper data\n    }\n\n    try {\n      const dealDate = new Date(dealDateStr);\n\n      // Check if date is valid\n      if (isNaN(dealDate.getTime())) {\n        console.warn(\"Invalid date found:\", dealDateStr);\n        return; // Skip this deal\n      }\n\n      const month = dealDate.toISOString().substring(0, 7); // YYYY-MM\n\n      if (!monthlyStats[month]) {\n        monthlyStats[month] = {\n          month,\n          totalDeals: 0,\n          wonDeals: 0,\n          lostDeals: 0,\n          totalValue: 0,\n          wonValue: 0,\n          lostValue: 0,\n          winRate: 0,\n        };\n      }\n\n      monthlyStats[month].totalDeals++;\n      monthlyStats[month].totalValue += dealValue;\n\n      if (status === \"Gewonnen\") {\n        monthlyStats[month].wonDeals++;\n        monthlyStats[month].wonValue += dealValue;\n      } else if (status === \"Verloren\") {\n        monthlyStats[month].lostDeals++;\n        monthlyStats[month].lostValue += dealValue;\n      }\n\n      // Calculate win rate\n      monthlyStats[month].winRate =\n        monthlyStats[month].totalDeals > 0\n          ? Math.round(\n              (monthlyStats[month].wonDeals / monthlyStats[month].totalDeals) *\n                100\n            )\n          : 0;\n    } catch (error) {\n      console.error(\"Error processing deal date:\", error);\n    }\n  });\n\n  // Convert to array and sort by month (newest first)\n  return Object.values(monthlyStats).sort((a, b) =>\n    b.month.localeCompare(a.month)\n  );\n}\n\nexport { calculateWeeklyLiquidityForecast, calculateWeeklyDealStats };\n\nexport async function handleCSVProcessing(request) {\n  try {\n    const formData = await request.formData();\n    const csvFile = formData.get(\"csv\");\n\n    if (!csvFile) {\n      return new Response(JSON.stringify({ error: \"No CSV file provided\" }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    }\n\n    // Read CSV content\n    const csvText = await csvFile.text();\n\n    // Parse CSV\n    const lines = csvText.split(\"\\n\").filter((line) => line.trim());\n    const headers = lines[0].split(\",\").map((h) => h.trim().replace(/\"/g, \"\"));\n    const rows = lines.slice(1).map((line) => {\n      const values = line.split(\",\").map((v) => v.trim().replace(/\"/g, \"\"));\n      const row = {};\n      headers.forEach((header, index) => {\n        row[header] = values[index] || \"\";\n      });\n      return row;\n    });\n\n    // Filter only won deals\n    const wonDeals = rows.filter((row) => row[\"Deal - Status\"] === \"Gewonnen\");\n\n    // Process liquidity forecast\n    const liquidityForecast = calculateLiquidityForecast(wonDeals);\n\n    // Process monthly deal statistics\n    const monthlyDealStats = calculateMonthlyDealStats(rows);\n\n    // Process the data with liquidity forecasting\n    const processedData = {\n      totalRows: rows.length,\n      wonDeals: wonDeals.length,\n      totalDealValue: wonDeals.reduce(\n        (sum, deal) => sum + parseFloat(deal[\"Deal - Wert\"] || 0),\n        0\n      ),\n      headers: headers,\n      sampleData: rows.slice(0, 5), // First 5 rows as sample\n      liquidityForecast: liquidityForecast,\n      monthlyDealStats: monthlyDealStats,\n      summary: {\n        columns: headers.length,\n        rows: rows.length,\n        wonDealsCount: wonDeals.length,\n        timestamp: new Date().toISOString(),\n      },\n    };\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: \"CSV processed successfully\",\n        data: processedData,\n      }),\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: \"Failed to process CSV\",\n        details: error.message,\n      }),\n      {\n        status: 500,\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n}\n", "/**\n * CSV Processing API for Vollpension Forecast\n * Handles CSV file uploads and processing\n */\n\nimport {\n  handleCSVProcessing,\n  calculateWeeklyLiquidityForecast,\n  calculateWeeklyDealStats,\n} from \"./csvProcessor.js\";\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n\n    // Handle CORS preflight requests\n    if (request.method === \"OPTIONS\") {\n      return new Response(null, {\n        status: 200,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type\",\n        },\n      });\n    }\n\n    // Route handling\n    if (url.pathname === \"/process-csv-weekly\") {\n      return await handleWeeklyCSVProcessing(request);\n    }\n\n    if (url.pathname === \"/health\") {\n      return new Response(\n        JSON.stringify({\n          status: \"ok\",\n          message: \"Vollpension Forecast API is running\",\n        }),\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    if (url.pathname === \"/process-csv\" && request.method === \"POST\") {\n      return handleCSVProcessing(request);\n    }\n\n    if (url.pathname === \"/\" && request.method === \"GET\") {\n      // Serve the static HTML file\n      return new Response(\n        `<!DOCTYPE html>\n<html>\n<head>\n    <title>Vollpension Forecast - Liquidit\u00E4tsplanung</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        body { \n            font-family: Arial, sans-serif; \n            max-width: 1000px; \n            margin: 0 auto; \n            padding: 20px; \n            background: #f5f5f5;\n        }\n        .container {\n            background: white;\n            padding: 30px;\n            border-radius: 10px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        .upload-area { \n            border: 3px dashed #007cba; \n            padding: 40px; \n            text-align: center; \n            margin: 20px 0; \n            border-radius: 8px;\n            background: #f8f9ff;\n            cursor: pointer;\n        }\n        .upload-area:hover { \n            border-color: #005a87; \n            background: #f0f2ff;\n        }\n        button { \n            background: #007cba; \n            color: white; \n            padding: 15px 30px; \n            border: none; \n            border-radius: 8px; \n            cursor: pointer; \n            font-size: 16px;\n            margin: 10px 0;\n        }\n        button:hover { background: #005a87; }\n        button:disabled { opacity: 0.6; cursor: not-allowed; }\n        .result { \n            margin-top: 30px; \n            padding: 20px; \n            background: white; \n            border-radius: 8px; \n            border: 1px solid #ddd;\n        }\n        .chart-container { margin: 20px 0; }\n        .summary { \n            display: grid; \n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); \n            gap: 15px; \n            margin: 20px 0; \n        }\n        .summary-card { \n            background: #f8f9ff; \n            padding: 20px; \n            border-radius: 8px; \n            text-align: center; \n            border: 1px solid #e0e0e0;\n        }\n        .summary-card h3 { margin: 0 0 10px 0; color: #333; font-size: 14px; }\n        .summary-card .value { font-size: 1.8em; font-weight: bold; color: #007cba; }\n        table { \n            width: 100%; \n            border-collapse: collapse; \n            margin-top: 20px; \n            background: white;\n        }\n        th, td { \n            padding: 12px; \n            text-align: left; \n            border-bottom: 1px solid #ddd; \n        }\n        th { \n            background: #f8f9ff; \n            color: #007cba; \n            font-weight: 600; \n        }\n        tr:hover { background: #f8f9ff; }\n        .loading {\n            text-align: center;\n            padding: 40px;\n            color: #007cba;\n        }\n        .spinner {\n            border: 4px solid #f3f3f3;\n            border-top: 4px solid #007cba;\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            animation: spin 1s linear infinite;\n            margin: 0 auto 20px;\n        }\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        .error {\n            background: #fee;\n            color: #c33;\n            padding: 20px;\n            border-radius: 8px;\n            margin: 20px 0;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>\uD83D\uDCB0 Vollpension Forecast</h1>\n        <p><strong>Liquidit\u00E4tsplanung basierend auf gewonnenen Deals</strong></p>\n        \n        <div class=\"upload-area\" onclick=\"document.getElementById('csvFile').click()\">\n            <h3>\uD83D\uDCC1 CSV-Datei hochladen</h3>\n            <p>Klicken Sie hier oder ziehen Sie eine CSV-Datei hierher</p>\n            <input type=\"file\" id=\"csvFile\" accept=\".csv\" style=\"display: none;\">\n        </div>\n        \n        <button onclick=\"processCSV()\" id=\"processBtn\">\uD83D\uDE80 Liquidit\u00E4tsplanung erstellen</button>\n        \n        <div id=\"result\" class=\"result\" style=\"display: none;\"></div>\n    </div>\n\n    <script>\n        let selectedFile = null;\n        \n        // Drag and drop functionality\n        const uploadArea = document.querySelector('.upload-area');\n        \n        uploadArea.addEventListener('dragover', function(e) {\n            e.preventDefault();\n            uploadArea.style.borderColor = '#005a87';\n            uploadArea.style.background = '#f0f2ff';\n        });\n        \n        uploadArea.addEventListener('dragleave', function(e) {\n            e.preventDefault();\n            uploadArea.style.borderColor = '#007cba';\n            uploadArea.style.background = '#f8f9ff';\n        });\n        \n        uploadArea.addEventListener('drop', function(e) {\n            e.preventDefault();\n            uploadArea.style.borderColor = '#007cba';\n            uploadArea.style.background = '#f8f9ff';\n            const files = e.dataTransfer.files;\n            if (files.length > 0) {\n                selectedFile = files[0];\n                updateUploadArea();\n            }\n        });\n        \n        document.getElementById('csvFile').addEventListener('change', function(e) {\n            selectedFile = e.target.files[0];\n            updateUploadArea();\n        });\n\n        function updateUploadArea() {\n            if (selectedFile) {\n                document.querySelector('.upload-area h3').textContent = '\u2705 ' + selectedFile.name;\n                document.querySelector('.upload-area p').textContent = 'Datei ausgew\u00E4hlt - bereit zur Verarbeitung';\n            }\n        }\n\n        async function processCSV() {\n            if (!selectedFile) {\n                alert('Bitte w\u00E4hlen Sie zuerst eine CSV-Datei aus');\n                return;\n            }\n\n            const processBtn = document.getElementById('processBtn');\n            const resultDiv = document.getElementById('result');\n            \n            // Show loading state\n            processBtn.disabled = true;\n            processBtn.textContent = '\u23F3 Verarbeite CSV...';\n            \n            resultDiv.style.display = 'block';\n            resultDiv.innerHTML = \\`\n                <div class=\"loading\">\n                    <div class=\"spinner\"></div>\n                    <p>Analysiere Deals und erstelle Liquidit\u00E4tsplanung...</p>\n                </div>\n            \\`;\n\n            const formData = new FormData();\n            formData.append('csv', selectedFile);\n\n            try {\n                const response = await fetch('/process-csv', {\n                    method: 'POST',\n                    body: formData\n                });\n\n                const result = await response.json();\n                \n                if (result.success && result.data.liquidityForecast) {\n                    displayLiquidityResults(result.data);\n                } else {\n                    resultDiv.innerHTML = '<h3>Processing Result:</h3><pre>' + JSON.stringify(result, null, 2) + '</pre>';\n                }\n            } catch (error) {\n                resultDiv.innerHTML = \\`\n                    <div class=\"error\">\n                        <h3>\u274C Fehler beim Verarbeiten</h3>\n                        <p>\\${error.message}</p>\n                    </div>\n                \\`;\n            } finally {\n                processBtn.disabled = false;\n                processBtn.textContent = '\uD83D\uDE80 Liquidit\u00E4tsplanung erstellen';\n            }\n        }\n\n        function displayLiquidityResults(data) {\n            const resultDiv = document.getElementById('result');\n            \n            resultDiv.innerHTML = \\`\n                <h3>\uD83D\uDCCA Liquidit\u00E4tsplanung Ergebnisse</h3>\n                \n                <div class=\"summary\">\n                    <div class=\"summary-card\">\n                        <h3>Gewonnene Deals</h3>\n                        <div class=\"value\">\\${data.wonDeals}</div>\n                    </div>\n                    <div class=\"summary-card\">\n                        <h3>Gesamt Deal-Wert</h3>\n                        <div class=\"value\">\\${new Intl.NumberFormat('de-DE', {style: 'currency', currency: 'EUR'}).format(data.totalDealValue)}</div>\n                    </div>\n                    <div class=\"summary-card\">\n                        <h3>Prognostizierte Liquidit\u00E4t</h3>\n                        <div class=\"value\">\\${data.liquidityForecast.summary.formattedFinalBalance}</div>\n                    </div>\n                    <div class=\"summary-card\">\n                        <h3>Prognose-Monate</h3>\n                        <div class=\"value\">\\${data.liquidityForecast.summary.totalMonths}</div>\n                    </div>\n                </div>\n                \n                <div class=\"chart-container\">\n                    <h3>\uD83D\uDCC8 Monatliche Liquidit\u00E4tsplanung</h3>\n                    <canvas id=\"liquidityChart\" width=\"400\" height=\"200\"></canvas>\n                </div>\n                \n                <h3>\uD83D\uDCCB Detaillierte Monats\u00FCbersicht</h3>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Monat</th>\n                            <th>Monatlicher Betrag</th>\n                            <th>Kumulativer \u00DCbertrag</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        \\${data.liquidityForecast.monthlyForecast.map(item => \\`\n                            <tr>\n                                <td><strong>\\${item.month}</strong></td>\n                                <td>\\${item.formattedAmount}</td>\n                                <td><strong>\\${item.formattedCumulativeBalance}</strong></td>\n                            </tr>\n                        \\`).join('')}\n                    </tbody>\n                </table>\n            \\`;\n            \n            // Create chart\n            createLiquidityChart(data.liquidityForecast.monthlyForecast);\n        }\n\n        function createLiquidityChart(forecastData) {\n            const ctx = document.getElementById('liquidityChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'bar',\n                data: {\n                    labels: forecastData.map(item => item.month),\n                    datasets: [{\n                        label: 'Monatlicher Cash-Flow',\n                        data: forecastData.map(item => item.amount),\n                        backgroundColor: 'rgba(0, 123, 186, 0.8)',\n                        borderColor: 'rgba(0, 123, 186, 1)',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    plugins: {\n                        legend: {\n                            display: false\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return 'Monatlicher Betrag: ' + new Intl.NumberFormat('de-DE', {\n                                        style: 'currency',\n                                        currency: 'EUR'\n                                    }).format(context.parsed.y);\n                                }\n                            }\n                        }\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            ticks: {\n                                callback: function(value) {\n                                    return new Intl.NumberFormat('de-DE', {\n                                        style: 'currency',\n                                        currency: 'EUR',\n                                        minimumFractionDigits: 0\n                                    }).format(value);\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    </script>\n</body>\n</html>`,\n        {\n          headers: { \"Content-Type\": \"text/html\" },\n        }\n      );\n    }\n\n    return new Response(\"Not Found\", { status: 404 });\n  },\n};\n\n// Weekly CSV Processing Handler\nasync function handleWeeklyCSVProcessing(request) {\n  try {\n    const formData = await request.formData();\n    const csvFile = formData.get(\"csv\");\n\n    if (!csvFile) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"No CSV file provided\",\n        }),\n        {\n          status: 400,\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n          },\n        }\n      );\n    }\n\n    const csvText = await csvFile.text();\n    const lines = csvText.split(\"\\n\");\n    const headers = lines[0].split(\",\").map((h) => h.replace(/\"/g, \"\").trim());\n\n    const deals = [];\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line) {\n        const values = line.split(\",\").map((v) => v.replace(/\"/g, \"\").trim());\n        const deal = {};\n        headers.forEach((header, index) => {\n          deal[header] = values[index] || \"\";\n        });\n        deals.push(deal);\n      }\n    }\n\n    // Filter won deals for liquidity forecast\n    const wonDeals = deals.filter(\n      (deal) => deal[\"Deal - Status\"] === \"Gewonnen\"\n    );\n\n    // Calculate weekly liquidity forecast\n    const weeklyLiquidityForecast = calculateWeeklyLiquidityForecast(wonDeals);\n\n    // Calculate weekly deal statistics\n    const weeklyDealStats = calculateWeeklyDealStats(deals);\n\n    // Calculate totals\n    const totalDealValue = wonDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal[\"Deal - Wert\"] || 0),\n      0\n    );\n\n    const result = {\n      wonDeals: wonDeals.length,\n      totalDealValue,\n      liquidityForecast: weeklyLiquidityForecast,\n      weeklyDealStats,\n    };\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: result,\n      }),\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      }\n    );\n  } catch (error) {\n    console.error(\"Weekly CSV processing error:\", error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: \"Failed to process CSV\",\n        details: error.message,\n      }),\n      {\n        status: 500,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      }\n    );\n  }\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/danielprundianu/Documents/projects/vollpension_forecast_light/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/danielprundianu/Documents/projects/vollpension_forecast_light/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/danielprundianu/Documents/projects/vollpension_forecast_light/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/danielprundianu/Documents/projects/vollpension_forecast_light/src/index.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/danielprundianu/Documents/projects/vollpension_forecast_light/.wrangler/tmp/bundle-lUtrlO/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/danielprundianu/Documents/projects/vollpension_forecast_light/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/danielprundianu/Documents/projects/vollpension_forecast_light/.wrangler/tmp/bundle-lUtrlO/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/danielprundianu/Documents/projects/vollpension_forecast_light/.wrangler/tmp/bundle-lUtrlO/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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",
  "names": []
}
